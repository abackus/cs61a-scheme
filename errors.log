
(2 2)
(2)
(2 2)
(2 2)
(2 2)
(2)
(2 2)
(2)
(2 2)
(2)
(
quote
hello
(
quote
hello
'
hello
(
quote
hello
'
hello
'
'
hello
(
quote
hello
'
hello
(
quote
hello
'
hello
'
'
hello
(
quote
hello
'
(
quote
hello
'
hello
'
'
hello
(
quote
hello
'
hello
'
'
hello
(
quote
hello
(
quote
hello
'
hello
'
'
hello
(
quote
(
1
2
'
(
1
2
(
quote
(
1
2
'
(
1
(
2
(
car
'
(
1
2
3
(
cdr
'
(
1
2
(
car
(
car
'
(
(
1
(
quote
3
(
eval
(
cons
'
car
'
(
'
(
4
2
(
quote
x
'
x
(
a
b
'
(
a
b
'
(
(
a
(
a
(
b
'
c
(
a
(
b
'
(
c
d
'
)
'
)
'
(
'
(
'
a
'
'
a
'
(
'
(
'
a
'
b
'
c
(
+
'
(
1
2
3
'
(
'
+
'
(
1
2
'
3
'
hello
(
car
'
(
1
2
(
car
'
(
1
2
'
(
'
a
'
'
a
'
(
'
(
'
a
'
b
'
c
(
+
'
(
1
2
3
'
(
'
+
'
(
1
2
'
3
(
begin
(
+
2
3
(
+
5
6
(
begin
(
define
x
3
x
(
begin
30
'
(
+
2
2
(
define
x
0
(
begin
42
(
define
x
(
+
x
1
x
(
begin
30
'
hello
(
begin
(
define
x
3
(
cons
x
'
(
y
z
(
begin
(
define
x
3
(
cons
x
'
(
x
z
(
define
x
0
(
begin
(
define
x
(
+
x
1
(
define
x
(
+
x
10
(
define
x
(
+
x
100
(
define
x
(
+
x
1000
x
(
lambda
(
x
y
(
+
x
y
(
lambda
(
x
(
+
x
(
+
x
x
(
lambda
(
x
(
lambda
(
2
(
lambda
(
x
y
x
(
define
(
f
x
y
(
+
x
y
(
define
(
f
x
y
(
+
x
y
f
(
define
(
f
(
+
2
2
f
(
define
(
f
x
(
*
x
x
f
(
define
(
foo
x
1
2
3
4
5
foo
(
define
(
foo
(
/
1
0
foo
(
define
(
f
x
x
(
define
(
f
x
x
(
define
size
2
size
(
define
x
(
+
2
3
x
(
define
x
(
+
2
7
x
(
eval
(
define
tau
6.28
(
define
pi
3.14159
(
define
radius
10
(
define
area
(
*
pi
(
*
radius
radius
area
(
define
radius
100
radius
area
(
define
0
1
(
define
error
(
/
1
0
(
define
(
square
x
(
*
x
x
(
square
21
(
define
square
(
lambda
(
x
(
*
x
x
(
square
(
square
21
(
(
lambda
(
x
(
list
x
(
list
(
quote
quote
x
(
quote
(
lambda
(
x
(
list
x
(
list
(
quote
quote
x
(
define
(
outer
x
y
(
define
(
inner
z
x
(
+
x
(
*
y
2
(
*
z
3
(
inner
x
10
(
outer
1
2
(
define
(
outer-func
x
y
(
define
(
inner
z
x
(
+
x
(
*
y
2
(
*
z
3
inner
(
(
outer-func
1
2
1
10
(
define
square
(
lambda
(
x
(
*
x
x
(
define
(
sum-of-squares
x
y
(
+
(
square
x
(
square
y
(
sum-of-squares
3
4
(
define
double
(
lambda
(
x
(
*
2
x
(
define
compose
(
lambda
(
f
g
(
lambda
(
x
(
f
(
g
x
(
define
apply-twice
(
lambda
(
f
(
compose
f
f
(
(
apply-twice
double
5